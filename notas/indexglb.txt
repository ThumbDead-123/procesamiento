<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>3D</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            font-family: Arial, sans-serif;
        }
        canvas {
            display: block;
        }
        #hud {
            position: absolute;
            top: 10px;
            left: 10px;
            color: white;
            font-size: 18px;
        }
        #restartBtn {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            padding: 20px 30px;
            background-color: #ff0000;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            display: none;
        }
        #changeViewBtn {
            position: absolute;
            top: 10px;
            right: 10px;
            padding: 10px 20px;
            background-color: #0000ff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
        }
    </style>
</head>
<body>
    <div id="hud">
        <div>Monedas: <span id="coinCount">0</span></div>
        <div>Puntaje: <span id="score">0</span></div>
    </div>
    <button id="restartBtn">Reiniciar Juego</button>
    <button id="changeViewBtn">Cambiar Vista</button>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three/examples/js/loaders/GLTFLoader.js"></script>
    <audio id="jumpSound" src="salto.mp3"></audio>
    <audio id="coinSound" src="moneda.mp3"></audio>
    <script>
        // Inicialización de Three.js
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        const renderer = new THREE.WebGLRenderer();
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(renderer.domElement);

        // Agregar luces
        const ambientLight = new THREE.AmbientLight(0xffffff, 0.5); // Luz ambiental
        scene.add(ambientLight);

        const directionalLight = new THREE.DirectionalLight(0xffffff, 1); // Luz direccional
        directionalLight.position.set(0, 10, 10);
        scene.add(directionalLight);

        // Variables para el juego
        let mario, coins = [], staticObstacles = [], movingObstacles = [], solidObstacles = [];
        let marioSpeed = 0.2;
        let jumpForce = 0.50;
        let gravity = 0.005;
        let isJumping = false;
        let isGrounded = true;
        let coinCount = 0;
        let score = 0;
        let obstacleSpeed = 0.1; // Velocidad de los obstáculos móviles
        let canMove = true; // Variable para controlar si Mario puede moverse

        // Creación del suelo con textura
        const groundTexture = new THREE.TextureLoader().load('https://threejs.org/examples/textures/terrain/grasslight-big.jpg');
        groundTexture.wrapS = groundTexture.wrapT = THREE.RepeatWrapping;
        groundTexture.repeat.set(25, 25);
        const groundGeometry = new THREE.PlaneGeometry(100, 200);
        const groundMaterial = new THREE.MeshBasicMaterial({ map: groundTexture });
        const ground = new THREE.Mesh(groundGeometry, groundMaterial);
        ground.rotation.x = -Math.PI / 2;
        scene.add(ground);

        // Creación del cielo de fondo
        const skyTexture = new THREE.TextureLoader().load('cielo.webp');
        scene.background = skyTexture;

        // Creación de Mario
        function createMario() {
            const loader = new THREE.GLTFLoader();
            loader.load('fantasma.glb', function (gltf) {
                mario = gltf.scene;
                mario.scale.set(0.5, 0.5, 0.5); // Ajusta la escala del modelo
                mario.position.y = 1; // Ajusta la posición de Mario si es necesario
                // Agregar modelo a la escena
                scene.add(mario);
            });
        }

        createMario();

        // Creación de monedas
        function createCoins() {
            const coinGeometry = new THREE.CylinderGeometry(0.5, 0.5, 0.1, 32);
            const coinMaterial = new THREE.MeshBasicMaterial({ color: 0xffff00 });
            const coinPositions = [
                { x: 5, y: 0.55, z: -10 },
                { x: -5, y: 0.55, z: -20 },
                { x: 0, y: 0.55, z: -30 },
                { x: 7, y: 0.55, z: -40 },
                { x: -7, y: 0.55, z: -50 }
            ];
            coinPositions.forEach(position => {
                const coin = new THREE.Mesh(coinGeometry, coinMaterial);
                coin.position.set(position.x, position.y, position.z);
                coins.push(coin);
                scene.add(coin);
            });
        }

        
        createCoins();

        // Creación de obstáculos estáticos
        function createStaticObstacles() {
            const obstacleGeometry = new THREE.BoxGeometry(1, 2, 1);
            
            // Cargar la textura desde una imagen
            const textureLoader = new THREE.TextureLoader();
            const texture = textureLoader.load('texturaHielo.jpg');
            
            // Aplicar la textura al material
            const obstacleMaterial = new THREE.MeshBasicMaterial({ map: texture });

            const obstaclePositions = [
                { x: -2, y: 1, z: -25 },
                { x: 4, y: 1, z: -35 },
                { x: -4, y: 1, z: -45 },
            ];
            obstaclePositions.forEach(position => {
                const obstacle = new THREE.Mesh(obstacleGeometry, obstacleMaterial);
                obstacle.position.set(position.x, position.y, position.z);
                staticObstacles.push(obstacle);
                scene.add(obstacle);
            });
        }

        createStaticObstacles();

        // Cargar la textura GIF del obstáculo móvil
        const textureLoader = new THREE.TextureLoader();
        const movingObstacleTexture = textureLoader.load('fuego.gif');

        // Material del obstáculo móvil con textura
        const movingObstacleMaterial = new THREE.MeshBasicMaterial({ map: movingObstacleTexture });

        // Creación de obstáculos móviles
        function createMovingObstacles() {
            const obstacleGeometry = new THREE.BoxGeometry(1, 2, 1);
            const obstaclePositions = [
                { x: 3, y: 1, z: -20 },
                { x: -3, y: 1, z: -30 },
                { x: 5, y: 1, z: -40 },
                { x: -5, y: 1, z: -50 },
            ];
            obstaclePositions.forEach(position => {
                const obstacle = new THREE.Mesh(obstacleGeometry, movingObstacleMaterial);
                obstacle.position.set(position.x, position.y, position.z);
                movingObstacles.push(obstacle);
                scene.add(obstacle);
            });
        }
        createMovingObstacles();

        // Posición inicial de la cámara
        camera.position.y = 5;
        camera.position.z = 10;
        camera.lookAt(0, 0, 0);

        // Variables para el control de la cámara con el mouse
        let isDragging = false;
        let previousMousePosition = {
            x: 0,
            y: 0
        };

        // Eventos para el movimiento del mouse
        window.addEventListener('mousedown', function(event) {
            isDragging = true;
            previousMousePosition.x = event.clientX;
            previousMousePosition.y = event.clientY;
        });

        window.addEventListener('mouseup', function() {
            isDragging = false;
        });

        window.addEventListener('mousemove', function(event) {
            if (!isDragging) return;
            let deltaMove = {
                x: event.clientX - previousMousePosition.x,
                y: event.clientY - previousMousePosition.y
            };

            // Actualizar la orientación de la cámara basada en el movimiento del mouse
            camera.rotation.y -= deltaMove.x * 0.01;
            camera.rotation.x -= deltaMove.y * 0.01;

            previousMousePosition = {
                x: event.clientX,
                y: event.clientY
            };
        });

        // Función para reproducir el sonido al saltar
        function playJumpSound() {
            const jumpSound = document.getElementById("jumpSound");
            jumpSound.currentTime = 0; // Reiniciar la reproducción si ya se está reproduciendo
            jumpSound.play();
        }

        // Función para reproducir el sonido al colisionar con monedas
        function playCoinSound() {
            const coinSound = document.getElementById("coinSound");
            coinSound.currentTime = 0; // Reiniciar la reproducción si ya se está reproduciendo
            coinSound.play();
        }

        // Eventos de teclado para el control de Mario
        const keysPressed = {};
        window.addEventListener('keydown', function(event) {
            keysPressed[event.key] = true;
            handleKeys();
            if (event.key === ' ') { // Espacio
                playJumpSound(); // Reproduce el sonido al saltar
            }
        });
        window.addEventListener('keyup', function(event) {
            delete keysPressed[event.key];
            handleKeys();
        });

        function handleKeys() {
            let movementX = 0;
            let movementZ = 0;
            if ('a' in keysPressed || 'A' in keysPressed) {
                movementX -= marioSpeed;
            }
            if ('d' in keysPressed || 'D' in keysPressed) {
                movementX += marioSpeed;
            }
            if ('w' in keysPressed || 'W' in keysPressed) {
                movementZ -= marioSpeed;
            }
            if ('s' in keysPressed || 'S' in keysPressed) {
                movementZ += marioSpeed;
            }
            if (' ' in keysPressed && !isJumping && isGrounded && canMove) {
                isJumping = true;
                isGrounded = false;
                jumpForce = 0.15;
            }

            // Movimiento de Mario
            if (canMove) {
                mario.position.x += movementX;
                mario.position.z += movementZ;
            }
        }

        // Función para cambiar entre vista normal y vista desde arriba
        let isTopView = false; // Variable para rastrear el modo de vista

        function toggleCameraView() {
            isTopView = !isTopView; // Cambiar el estado del modo de vista

            if (isTopView) {
                // Cambiar la posición y la orientación de la cámara para la vista desde arriba
                camera.position.set(0, 50, 0); // Posición de la cámara (elevada)
                camera.lookAt(0, 0, 0); // Apuntar la cámara hacia el origen
            } else {
                // Restaurar la posición y la orientación de la cámara a la vista normal
                camera.position.set(0, 5, 10); // Posición de la cámara
                camera.lookAt(0, 0, 0); // Orientación de la cámara
            }
        }

        // Agregar un controlador de evento al botón para cambiar la vista
        document.getElementById("changeViewBtn").addEventListener("click", toggleCameraView);


        // Evento para reiniciar el juego
        document.getElementById("restartBtn").addEventListener("click", function() {
            location.reload();
        });

        // Render loop
        function animate() {
            requestAnimationFrame(animate);

            // Movimiento de Mario
            if (isJumping && canMove) {
                mario.position.y += jumpForce;
                jumpForce -= gravity;
                if (mario.position.y <= 1) {
                    mario.position.y = 1;
                    isJumping = false;
                    isGrounded = true;
                }
            }

            // Control de la cámara
            camera.position.x = mario.position.x;
            camera.position.y = mario.position.y + 5;
            camera.position.z = mario.position.z + 10;

            // Movimiento de obstáculos móviles
            movingObstacles.forEach(obstacle => {
                obstacle.position.x += obstacleSpeed;
                if (obstacle.position.x > 10 || obstacle.position.x < -10) {
                    obstacleSpeed *= -1; // Invertir la dirección al alcanzar los límites
                }
            });

            // Detección de colisiones con monedas
            coins.forEach((coin, index) => {
                if (coin.position.distanceTo(mario.position) < 1) {
                    coin.position.y = -10; // Ocultar la moneda
                    coinCount++;
                    score += 10;
                    document.getElementById("coinCount").textContent = coinCount;
                    document.getElementById("score").textContent = score;

                    // Reproducir sonido de la moneda
                    playCoinSound();

                    // Verificar si se han obtenido 5 monedas
                    checkCoinCount();
                }
            });

            // Detección de colisiones con obstáculos estáticos y móviles
            if (canMove) {
                staticObstacles.forEach((obstacle, index) => {
                    if (obstacle.position.distanceTo(mario.position) < 1) {
                        // Mostrar botón de reinicio
                        document.getElementById("restartBtn").style.display = "block";
                        // Impedir que Mario se mueva
                        canMove = false;
                        // Iniciar la animación de Mario subiendo
                        animateMarioUp();
                    }
                });

                movingObstacles.forEach((obstacle, index) => {
                    if (obstacle.position.distanceTo(mario.position) < 1) {
                        // Mostrar botón de reinicio
                        document.getElementById("restartBtn").style.display = "block";
                        // Impedir que Mario se mueva
                        canMove = false;
                        // Iniciar la animación de Mario subiendo
                        animateMarioUp();
                    }
                });
            }

            renderer.render(scene, camera);
        }
        animate();

        // Verificar si se han obtenido 5 monedas
        function checkCoinCount() {
            if (coinCount >= 5) {
                // Mostrar ventana con botones
                const confirmDialog = confirm("¡Felicidades! ¿Quieres pasar al siguiente nivel?");
                if (confirmDialog) {
                    // Redirigir a otra página
                    window.location.href = "level_2.html";
                } else {
                    // Continuar el juego
                    coinCount = 0;
                    document.getElementById("coinCount").textContent = coinCount;
                }
            }
        }

        // Función para animar a Mario subiendo
        function animateMarioUp() {
            const upwardSpeed = 0.1;
            const maxUpwardPosition = 20; // Altura máxima a la que Mario puede llegar
            if (mario.position.y < maxUpwardPosition) {
                mario.position.y += upwardSpeed;
            }
        }

    </script>
</body>
</html>
